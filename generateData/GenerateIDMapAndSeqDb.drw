#
#  This script is used to generate an IDmapping of the reference 
#  genomes ids (mainly UniProt/Ensembl) to successive integers corresponding
#  to the genome ordering of GenomeSummaries.
#  The scirpt also generates a darwin database with all the sequences.
#
#                                              Adrian Altenhoff, May 26, 2011
#

omadir := getenv('DARWIN_OMA_REPO_PATH');
ReadProgram(omadir.'/lib/darwinit');
GS := GenomeSummaries:
NS := length(genomes):

Goff := CreateArray(1..NS+1):
for i to NS do Goff[i+1] := Goff[i]+GS[genomes[i],TotEntries] od:

primary_tag := 'AC';
second_tags := ['ID','IPI','EntrezGene','ENSEMBL','EnsemblGenomes','EnsemblGenomes_PRO','EnsemblGenomes_TRS','Ensembl',
                'Ensembl_PRO','Ensembl_TRS','CRC64','RefSeq','GeneID','EMBL-CDS','UniProtKB','UniProtKB-ID'];
seqs := CreateArray(1..Goff[NS+1]):
prim := CreateArray(1..Goff[NS+1]):
scnd := []:
for i to NS do 
    g := genomes[i];
    DB := ReadDb( GenomeFileName[g] );
    for eNr to DB[TotEntries] do
        e := Entry(eNr); 
        seqs[eNr+Goff[i]] := SearchTag('SEQ',e):
        prim[eNr+Goff[i]] := SearchTag(primary_tag, e):
        lst := []:
        for tag in second_tags do 
            t := SearchTag(tag,e);
            if t<>'' then 
                lst := append(lst, op(SearchDelim('; ',t)));
            fi:
        od:
        scnd := append(scnd, seq([z,eNr+Goff[i]],z={op(lst)}));
    od:
    printf('# collected ids from %s (%d/%d). tot nr ids so far: %d\n', g, i, NS, length(scnd)):
od:

# assert that primary ids are uniq
prim_set := {op(prim)}:
assert(length(prim_set) = length(prim));
printf('# all prim acs are unique. checking now for duplicated secondary ids\n');

# find duplicates and remove them. Search for ids which map do different
# proteins. These need to be removed from the mapping and kept in special list
scnd := [op({op(scnd)})]:
lenM := length(scnd);
mapping := [seq([prim[i], i], i=1..Goff[NS+1])]:
remID := []:
for i to lenM do 
    for j from i+1 to lenM while scnd[i,1]=scnd[j,1] do od:
    if j-i=1 and not member(scnd[i, 1], prim_set) then 
        mapping := append(mapping, scnd[i]):
    else i := j-1;
    fi:
od:
mapping := sort(mapping):
printf('# found %d unique IDs (incl primary ACs) for %d sequences in %d genomes. Building Index now...\n', 
    length(mapping), Goff[NS+1], NS);

Set(printgc=false):
fn := getenv('DARWIN_OMADATA_PATH').'/IDmapping.drw';
OpenWriting( fn );
printf('IDmapping := %A:\n',mapping);
OpenWriting(previous);
CallSystem('gzip -f9 '.fn);

ReadProgram( getenv('DARWIN_ORTHOLOG_BENCHMARK_REPO_PATH').'/lib/Index' );
fn := getenv('DARWIN_OMADATA_PATH').'/IDIndex.db';
CreateIndex( mapping, fn);
if length(FileStat(fn))=0 then warning('IDIndex.db not created') fi:

eNr2ids := sort(mapping,x->x[2]):
fn := getenv('DARWIN_OMADATA_PATH').'/ServerSeqs.db';
k0 := 1;
OpenWriting( fn );
for i to Goff[NS+1] do 
    printf('<E><OS>%s</OS><MAPIDS>',genomes[ SearchOrderedArray(i-1,Goff) ]);
    
    for k from k0 to length(eNr2ids) while eNr2ids[k,2]=i do od:
    printf('%s', ConcatStrings( [seq(eNr2ids[z,1], z=k0..k-1)], '; '));
    k0 := k;
    printf('</MAPIDS><SEQ>%s</SEQ></E>\n',seqs[i]);
od:
OpenWriting(previous);

