# 
# This file precomputes the mapping of the reference phylogenetic trees to 
# the EntryNumbers and stores those files in data/ReconciledTrees.drw
#
ReadProgram(getenv('DARWIN_ORTHOLOG_BENCHMARK_REPO_PATH').'/lib/darwinit');
DUPL := {':D=T',':D=Y','D=Y','D','DUPLICATION',':Ev=duplication',':Ev=DUPLICATION'};
SPEC := {':D=F',':D=N','D=N','S','SPECIATION',':Ev=speciation',':Ev=SPECIATION'};
SPEC_MATCH := SPEC minus {'S','SPECIATION'}:
DUPL_MATCH := DUPL minus {'D','DUPLICATION'}:
overwrite := true:
if not assigned(exclude) then exclude := {} fi:


GetExcludeEntryNrs := proc(exclude)
    global genomes, GenomeSummaries:

    if length(exclude) <= 0 then return({}) fi:

    ReadProgram(refset_path.'/Summaries.drw');
    GS := GenomeSummaries:
    NG := length(genomes):
    Goff := CreateArray(1..NG+1):
    for i to NG do Goff[i+1] := Goff[i] + GS[genomes[i],TotEntries] od:
    exclude_ids := [];
    for g in exclude do 
        i := SearchArray(g, genomes):
        if i<=0 then error('invalid exclude genome: '.g) fi:
  	exclude_ids := append(exclude_ids, seq(enr, enr=Goff[i]+1..Goff[i+1]));
    od:
    return( {op(exclude_ids)} );
end:              

exclude_enrs := GetExcludeEntryNrs(exclude):
printf('loaded %d enrs to exclude\n', length(exclude_enrs));

SetDatasetVariables := proc(;(ref='OMA'):string)
    global outfile, outfile_semiauto, IDIndex, DB, logFn;
    outfile := refset_path.'/ReconciledTrees.drw':
    outfile_semiauto := refset_path.'/ReconciledTreesSemiAuto.drw':
    IDIndex := ReadDb(refset_path.'/IDIndex.db');
    logFn := refset_path.'/ReconciledTrees.log';
end:

MatchID := proc(id:string)
    oE := SearchIndex(id,IDIndex);
    if oE=NULL then 
        for potId in SearchDelim('_',id) do
            oE := SearchIndex(potId, IDIndex);
            if oE<>NULL then break; fi:
        od:
    fi:
    return(oE);
end:

ExtractPairRelR := proc(t:Tree ; (mappings=NULL):{procedure,table})
    global __PWR;
    if type(t, Leaf) then
        if mappings=NULL then mapfun := x->{x['Label']};
        elif type(mappings,table) then mapfun := x->mappings[x['Label']];
        elif type(mappings,procedure) then mapfun := mappings;
        else error('unknown mappings type'); 
        fi:
        
        oE := NULL;
        if printlevel > 2 then printf('Leaf: %A\n', t); fi:
        for z in mapfun( t ) do
            if z=unassigned then next fi:
            if printlevel > 2 then printf('z-id: %A\n', z); fi:
            oE := MatchID(z,IDIndex);
            if oE<> NULL then break fi:
        od:
	if oE=NULL then 
            lprint('cannot map protein '''.t[Label].'''');
        elif member(oE, exclude_enrs) then
            lprint(t['Label'].' belongs to excluded genomes');
            oE := NULL:
        else printf('%a --> %d (internal id)\n', t['Label'], oE) 
        fi:
        return( If(oE=NULL,NULL,{oE}) );
    else
        tL := ExtractPairRelR(t[Left], mappings );
        tR := ExtractPairRelR(t[Right],mappings ); 
        if tL=NULL then return(tR);
        elif tR=NULL then return(tL);
        else
            if intersect(tL,tR)<>{} then
                lprint('intersect not empty:'.string(intersect(tL,tR)).If(length(t)>3,' '.t[4],''));
                tL := minus(tL, tR);
            fi;
            
            xtra := If(length(t)=3, [], If(type(t['xtra'],list),t['xtra'], [t['xtra']])):
            ev := 'S';
            for z in xtra do 
                if member(z, SPEC_MATCH) then ev := 'S'; break;
                elif member(z, DUPL_MATCH) then ev := 'D'; break;
                elif max(seq(SearchString(x,z),x=SPEC_MATCH))>0 then ev := 'S'; break;
                elif max(seq(SearchString(x,z),x=DUPL_MATCH))>0 then ev := 'D'; break;
                else 
                    numMatch := MatchRegex('[0-9.]*', z);
                    if length(numMatch)=1 then 
                        # most probably a bootstrap value. ignore this one.
                        next;
                    else
                        printf('dubious event: %a\n', z);
                        ev := z;
                    fi:
                fi;
            od:
 
            for p1 in tL do for p2 in tR do
                if __PWR[{p1,p2}]=unassigned then
                    __PWR[{p1,p2}] := ev;
                else
                    printf('WARNING: dubious pair ('.p1.'/'.p2.'), annotated multiple times\n');
                    if __PWR[{p1,p2}]<>ev then 
                        printf(' --> ERROR: different events for same pair\n');
                    fi:
                fi:
                 __PWR[{p1,p2}] := ev;
            od od:
            return( union(tL,tR) );
        fi:
    fi:
end:

ExtractPairwiseRel := proc(t:Tree ; (mapping=NULL):{procedure,table}, (logFn=NULL):string)
    global __PWR; __PWR := table();
    if logFn<>NULL then 
        OpenAppending(logFn); 
    fi:
    prots := ExtractPairRelR(t, mapping):
    if prots = NULL then prots := {} fi:
    printf(' --> %d/%d proteins mapped\n', length(prots), length(indets(t,Leaf)));
    if logFn<>NULL then 
        OpenAppending(previous); 
    fi:
    return( [prots, __PWR] );
end:



to 1 do
##################################################################################
#  ____       __ ____       _   ____    ____    _  _____  _    ____  _____ _____ 
# |  _ \ ___ / _/ ___|  ___| |_| ___|  |  _ \  / \|_   _|/ \  / ___|| ____|_   _|
# | |_) / _ \ |_\___ \ / _ \ __|___ \  | | | |/ _ \ | | / _ \ \___ \|  _|   | |  
# |  _ <  __/  _|___) |  __/ |_ ___) | | |_| / ___ \| |/ ___ \ ___) | |___  | |  
# |_| \_\___|_| |____/ \___|\__|____/  |____/_/   \_\_/_/   \_\____/|_____| |_|  
#                                                                                
##################################################################################
SetDatasetVariables();
if overwrite=true then
    for f in [outfile, outfile_semiauto] do 
        OpenWriting(f);
        printf('ReconciledTrees := table():\n');
        OpenWriting(previous);
    od:
fi:

treeVersion := '_v5_sens_up_2022';
fams := ['NOX1-4','POP','VATB','SERC',
    'HOX9-14','SUMF','S10-S20','ASTER',
    'CITE','BAMBI','APP','CLUS','BAR','PSEN',
    'MAPT', 'CASP','GH14','TRFE'];
famIds := ['NOX','POP','VATB',
    'SERC','HOX','SUMF',
    'RPS','ASTER','CITE','BAMBI','APP','Clusterin',
    'BAR','PSEN',
    'MAPT','CASP','GH14','TRFE'];

for famNr to length(fams) do
    fam := fams[famNr];
    name := famIds[famNr];
    t := ReadRawFile(sprintf('%s/../data/%s_referenceProteome%s.nhx', refset_path, fam, treeVersion));
    label := fam.' protein family';
    tree := ParseNewickTree(t);
    if logFn<>NULL then 
        OpenAppending(logFn); printf('\n\n%s\n', label); OpenAppending(previous);
    fi:
    map  := ExtractPairwiseRel(tree,logFn):

    case := RecTreeCase(name, label, map[1], map[2], tree, 
      'Brigitte Boeckmann (2010) Manually reconciled phylogenetic tree of '.
      'the '.label );

    OpenAppending(outfile);
    printf('ReconciledTrees[''%s''] := %A:\n', name, case);
    OpenAppending(previous);
od:


############################################
# All of Treefam A
name := 'TreeFamA';
label:= 'Reconciled gene trees from TreeFam A';
t := ReadRawFile(refset_path.'/../data/treefam/treefam2reference.txt');
mapping := table():
for z in SplitLines(t) do
    x := SearchDelim('\t',z[1..-2]);
    mapping[x[1]] := x[2];
od:
fams := TimedCallSystem('ls '.refset_path.'/../data/treefam/*.nhx')[2]:
fams := [seq(z[1..-2], z=SplitLines(fams))]:
rels := table(): memb := {}: 
errT := errM := 0;
logFn_treefam := ReplaceString('.log', '-treefamA.log', logFn);
for fam in fams do 
    tree := traperror(ParseNewickTree( ReadRawFile(fam) )):
    if tree=lasterror then 
        prinf('cannot read %s\n', fam);
        errT:=errT+1; 
        next 
    fi:

    t := traperror(ExtractPairwiseRel(tree, mapping, logFn_treefam));
    if t=lasterror then 
        printf('cannot extract relations from tree in fam %s\n', fam);
        prints(t);
        errM := errM+1; 
        next 
    fi:
    memb := union(memb, t[1]);
    for z in Indices(t[2]) do 
        rels[z] := t[2,z];
    od:
od:
case := RecTreeCase( name, label, memb, rels, tree,
    'Ruan et al, Nucleic Acids Res. 2008 (Database issue)'):
OpenAppending(outfile_semiauto);
printf('ReconciledTrees[''%s''] := %A:\n', name, case);
OpenAppending(previous);

od: # to 1

done


#########################################
# Bork study on curated protein families
# Trachana et al, "Orthology predition methods: A quality assessment using curated protein families", 
# Bioessays, 33, 769-780, 2011

# define BorkCase datastructure. while reading the cases from a file, the reconciled gene trees are
# computed on the fly. 
BorkCase := proc(GrpID:string, FamilyName:string, Cat:list(string), RecTree:{0,Tree}, Seqs:list, IDs:list)
    if nargs>4 then noeval(procname(args)):
    elif nargs=3 then
        gTree := traperror(ParseNewickTree( ReadRawFile( sprintf('%s/raw/bork_study/%s.tree',datdir,GrpID) ))):
        if gTree=lasterror then warning('cannot parse BorkTree '.GrpID); return( procname( args, 0)); fi:
        seqs := traperror(ReadFastaWithNames( sprintf('%s/raw/bork_study/%s.fasta',datdir,GrpID) )):
        if seqs=lasterror then warning('cannot load fasta for BorkTree '.GrpID); return( procname( args, 0)); fi:
        procname( args, gTree, op(seqs) );
    else error('undefined constructor for BorkCase'); 
    fi:
end:
CompleteClass(BorkCase):

GetEntriesWithSeq := proc(s:string; db:database)
    global DB:
    if assigned(db) then curDB := DB: DB := db fi:
    pat := SearchSeqDb(s);
    eNrs := []:
    for p from pat[1,1] to pat[1,2] do 
        eNrs := append(eNrs, GetEntryNumber(DB[Pat,p]));
    od:
    eNrs := {op(eNrs)};
    if type(curDB, database) then DB := curDB fi:
    return(eNrs);
end:

AlignRange := proc(s:string, dbrange:integer..integer ; 
    (minScore=250):positive, 
    (minIdent=.90):nonnegative, 
    db:database)
    global DB:
    if assigned(db) then curDB := DB: DB := db fi:
    als := []:
    for i from dbrange[1] to dbrange[2] do
        s1 := Sequence(Entry(i)):
        scr0 := DynProgScore(s,s1,DM,JustScoreShort);
        if scr0>minScore then
            al := Align(s,s1,DMS,Local);
            if al[Identity]>=minIdent then 
                als := append(als, [i,al]);
            fi;
        fi:
    od:    
    als := sort(als, x->-x[2,'Identity']);
    if type(curDB,database) then DB := curDB fi:
    return( als );
end:

InferSpeciesFromLabel := proc(s:string)
    if SearchString('ENSP0',s)>-1 then HUMAN;
    elif SearchString('ENSMUS',s)>-1 then MOUSE;
    elif SearchString('ENSRNO',s)>-1 then RATNO;
    elif SearchString('ENSGAL',s)>-1 then CHICK;
    elif SearchString('ENSDAR',s)>-1 then DANRE;
    elif SearchString('ENSTNI',s)>-1 then TETNG;
    elif SearchString('FBpp',s)>-1 then DROME;
    elif SearchString('Nemve',s)>-1 then NEMVE;
    elif SearchString('Monbr1',s)>-1 then MONBE;
    elif length( sscanf(s, '%[A-Z]%[A-Z0-9].%[0-9]%s') )>=3 then CAEEL;
    else 'unknown';
    fi;
end:

SearchIndexHarder := proc( id:string, IDIndex:database )
    m := SearchIndex(id, IDIndex);
    if m=NULL and SearchString('|',id)>-1 then
        for z in SearchDelim('|',id) do
            m := SearchIndex(trim(z), IDIndex);
            if m<>NULL then break fi:
        od:
    fi:
    return(m);
end:

StoreUnknown := proc(lab)
    global unknown;
    if not assigned(unknown) then unknown := []: fi:
    unknown := append(unknown,lab);
    warning(lab.' is an unknown protein');
end:

MapTree := proc(t:Tree, bc:BorkCase)
    global label2org;
    if type(t, Leaf) then
        lab := t['Label'];
        s := bc['Seqs',SearchArray(lab, bc['IDs'])];
        matchingSeqs := GetEntriesWithSeq(s, SeqDB);
        print(matchingSeqs);
        m := SearchIndexHarder(lab, IDIndex);

        if m=NULL then
            org := InferSpeciesFromLabel(lab);
            g := '';
            if length(matchingSeqs)>0 then 
                for eNr in matchingSeqs do 
                    g := GenomeCodeFromENr(eNr,'RefSet5');
                    if g=org then break fi:
                od:
            fi:
            if g<>org then
                als := traperror(AlignRange(s, GenomeRange(org,'RefSet5')));
                if als<>lasterror and length(als) > 0 then 
                    eNr := als[1,1]; g := org;
                fi:
            fi:
            if g=org then
                mapStat+1;
            else 
                StoreUnknown(lab); 
                mapStat+0;
                return( NULL );
            fi:
        elif member(m,matchingSeqs) then
            g := GenomeCodeFromENr(m,'RefSet5'); 
            mapStat+1;
            eNr := m;
        else 
            sDB := Sequence(Entry(m)):
            al := Align(s,sDB,DMS,'Local');
            if al[Identity]>.95 then 
                g := GenomeCodeFromENr(m,'RefSet5');
                mapStat+1;
                eNr := m;
            else 
                warning(sprintf('%s is too different: %.1f%% identity', lab, al[Identity]*100));
                StoreUnknown(lab); 
                mapStat+0;
                return(NULL);
            fi:
        fi:
        label2org[eNr] := g;
        return( Leaf(eNr,t[Height]) ):
    else 
        tL := procname(t[Left], bc);
        tR := procname(t[Right], bc);
        if tL=NULL then return(tR);
        elif tR=NULL then return(tL);
        else return( Tree(tL, t[Height], tR) ):
        fi:
    fi
end:

# this call loads 'cases', an array with all the 70 currated genes
ReadProgram('data/bork_cases.drw');
SeqDB := ReadDb(refset5DBpath.'/ServerSeqs.db');
CreateDayMatrices();
# species tree from ncbi taxonomy
specTree := Tree(Leaf(MONBE,7),3,Tree(Tree(Tree(Tree(Tree(Leaf(DANRE,29),14,Tree(Tree(Tree(
Tree(Tree(Leaf(MOUSE,30),27,Leaf(RATNO,29)),21,Tree(Leaf(HUMAN,30),28,Leaf(PANTR
,30))),20,Leaf(CANFA,26)),19,Leaf(MONDO,25)),17,Leaf(CHICK,31))),9,Leaf(CIOIN,16
)),7,Leaf(DROME,34)),6,Leaf(CAEEL,15)),5,Leaf(NEMVE,12))):
label2org := table(): mapStat := Stat():
g2s := x->label2org[x];
rels := table(): memb := {}: 
errT := errM := 0;
# stupid hack to go from eNr to IDs, which will be converted back to eNrs in ExtractPairwiseRel
revMap := proc(l:Leaf)
    global DB:
    if assigned(DB) then curDB := DB fi:
    DB := SeqDB:
    idList := SearchDelim('; ', SearchTag('MAPIDS',Entry(l['Label']))):
    if type(curDB,database) then DB := curDB fi:
    return( idList );
end:

for c in cases do 
    gTree := MapTree( c['RecTree'], c);
    rTree := ReconcileTree(gTree, specTree, g2s, true)[1];

    t := traperror(ExtractPairwiseRel(rTree,revMap));
    if t=lasterror then errM := errM+1; next fi:
    assert( t[1]={seq(z['Label'],z=indets(rTree,Leaf))} ):
    memb := union(memb, t[1]);
    for z in Indices(t[2]) do 
        rels[z] := t[2,z];
    od:
od:
name := 'BorkStudy';
label:= 'OrthoBench dataset compiled for "Trachana et al, Bioessays, 2011"';
case := RecTreeCase( name, label, memb, rels, rTree,'Trachana et al, Bioessays, 2011'):
OpenAppending(outfile_semiauto);
printf('ReconciledTrees[''%s''] := %A:\n', name, case);
OpenAppending(previous);
AddTestProperty(name,noeval(EvaluateRefPhyloTestProperty),[name,'SemiAuto'],UTCTime());


od:
lprint('lasterror:',lasterror);
done
