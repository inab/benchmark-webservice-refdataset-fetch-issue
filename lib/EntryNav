module external NrOfProteins, NrOfGenomes, GenomeNrFromENr, GenomeNrFromCode,
    GenomeRange, GenomeCodeFromENr, ENrFromLabel, ENr2Label, Nr2SEQ,
    DbEntryNrFromENr, ParseLongList, KnownSpecies, GSIDtab,ENr2XRef, 
    GetGenomeSummaries;
#local GSIDtab; #genomes, GenomeSummaries;

GSIDContainer := proc(dataset:string, NS:posint, GSID:matrix, GSPOR:matrix, IndDB:database, GS:table)
    noeval(procname(args)):
end:
CompleteClass(GSIDContainer):

LoadGenomeStartIDs := proc()
    global genomes, GenomeSummaries, DB:

    ReadProgram(refset_path.'/Summaries.drw');
    GS := GenomeSummaries;
    NS := length(genomes);
    GSID  := CreateArray(1..NS);
    GSPOR := transpose( sort([seq([genomes[g],g],g=1..NS)]) );
    
    for g to length(genomes) do
        GSID[g] := [If(g=1, 1, GSID[g-1,1]+GSID[g-1,3]), 
                    genomes[g], GS[genomes[g],TotEntries]];
    od:
    GSID := transpose(sort(GSID));
    
    curDB := DB:
    IndDB := ReadDb(refset_path.'/ServerIndexed.db');
    if type(curDB,database) then DB := curDB fi:

    return( GSIDContainer( ref, NS, GSID, GSPOR, IndDB, GS ) ):
end:

GSIDtab := LoadGenomeStartIDs();

NrOfGenomes := proc()
    return( GSIDtab['NS'] );
end:

NrOfProteins := proc( )
    gsid := GSIDtab['GSID'];
    n := GSIDtab['NS'];
    return( gsid[1,n] + gsid[3,n] - 1 );
end:

GenomeNrFromENr := proc(eNr:posint)
    g := SearchOrderedArray(eNr, GSIDtab['GSID', 1]):
    assert(g > 0 and g <= GSIDtab['NS']):
    return( g ):
end:

GenomeNrFromCode := proc(g:string)
    if length(g)<>5 then error('invalid genome code: '.g);
    else
        gsDat := GSIDtab;
        k := SearchOrderedArray(g, gsDat['GSPOR',1]);
        if k<=0 or k>gsDat['NS'] or gsDat['GSPOR',1,k]<>g then 
            error('unknown genome code: '.g); fi:

        return(gsDat['GSPOR',2,k]);
    fi:
end:

GenomeRange := proc(g:string)
    i := GenomeNrFromCode(g);
    GSID := GSIDtab['GSID'];
    return( GSID[1,i]..GSID[1,i]+GSID[3,i]-1 );
end:


GenomeCodeFromENr := proc(eNr:posint)
    return( GSIDtab['GSID',2, GenomeNrFromENr(eNr)] ):
end:


ENrFromLabel := proc(l:string)
    if length(l)<6 then error('invalid EntryLabel: '.l);
    else 
        org := l[1..5];
        gsDat := GSIDtab;
        gNr := GenomeNrFromCode(org);
       
        nr := parse(l[6..-1]):
        if not type(nr, posint) or nr >= gsDat['GSID',3,gNr] then 
            error('not a valid entry nr: '.l); fi:
	
        return( gsDat['GSID',1,gNr] + nr - 1 );
    fi:
end:
       
ENr2Label := proc(eNr:posint)
    g := GenomeNrFromENr(eNr):
    gsid := GSIDtab['GSID'];
    nr := eNr - gsid[1,g] + 1;
    return( sprintf('%s%05d', gsid[2,g], nr) );
end:


#####################################################
# Encode ENTRYNR in Seqence Tag to quickly query for
# the entry belonging to ENTRYNR.
Nr2SEQ := proc(p:posint)
    base := 16:
    N := floor(log(p)/log(base)+3):
    s := CreateString(N);
    rem := p;
    s[1] := 'X':
    for j from 2 to N-1 do 
        x := floor(rem/base);
        s[j] := IntToA(rem-base*x+1);
        rem := x;
    od:
    s[N] := 'X':
    return(s):
end:

DbEntryNrFromENr := proc(oE:posint)
    s := Nr2SEQ(oE):
    pat := SearchSeqDb(s):
    if pat[1,2] = pat[1,1] then
        GetEntryNumber(DB[Pat,pat[1,1]]);
    elif pat[1,2]<pat[1,1] then
        NULL;
    else print(Entry(pat)); error('more than one Entry with same ID.') 
    fi:
end:

###############
# Parses a potentially long LIST of more than 70000 chars.
ParseLongList := proc(s:string)
    if length(s) <= 70000 then return(parse(s));
    else
            parts := SearchDelim(',', s[2..-2]);
            return( [seq( parse(z), z=parts)] );
    fi;
end:


KnownSpecies := proc()
    return( sort(GSIDtab['GSID',2]) );
end:

GetGenomeSummaries := proc()
    return( GSIDtab['GS'] );
end:

ENr2XRef := proc(oE:posint ; 'typ'=((typ=NULL):string))
    global DB:
    curDB := DB: 
    DB := GSIDtab['IndDB'];
    ids := SearchTag('MAPIDS', Entry(oE)):
    xref := TrimID(ids, typ);
    if xref=NULL then xref := ENr2Label(oE) fi:
    if type(curDB,database) then DB := curDB fi:
    return( xref );
end:

end: #module
